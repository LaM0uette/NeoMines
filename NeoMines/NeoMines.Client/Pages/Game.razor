@page "/Game/{GameModeIndex:int}"
@using NeoMines.Model.Game
@inherits GameBase
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<title>Game - @GameMode</title>

<style>
    .mine-grid
    {
        grid-template-columns: repeat(@Columns, 1fr);
        grid-template-rows: repeat(@Rows, 1fr);
    }
</style>

<div class="game-body"
     @oncontextmenu="() => { }"
     @oncontextmenu:preventDefault="true"
     @onpointerdown="() => { }"
     @onpointerdown:preventDefault="true">
    
    <div class="game-body__container">

        <div class="header-game">

            <div class="game-timer">
                <img src="img/timer.png" class="game-timer__icon" alt="timer" draggable="false"/>
                <div class="game-timer__timer-container">
                    <p class="game-timer__timer">@FormattedTime</p>
                </div>
            </div>

            <div class="game-state">

                @if (IsWin)
                {
                    <p class="game-state__title game-state__title--win">WIN</p>
                }
                else if (IsGameOver)
                {
                    <p class="game-state__title game-state__title--game-over">GAME OVER</p>
                }

            </div>

            <div class="game-bombs">
                <img src="img/bomb.png" class="game-bombs__icon" alt="bomb-counter" draggable="false"/>
                <div class="game-bombs__count-left-container">
                    <p><span class="game-bombs__count-left">@CurrentFlagCount</span><span class="game-bombs__count">/@BombCount</span></p>
                </div>
            </div>

        </div>

        <div class="mine-grid">

            @for (var row = 0; row < Rows; row++)
            {
                for (var col = 0; col < Columns; col++)
                {
                    var currentRow = row;
                    var currentColumn = col;

                    var cell = Grid[row, col];

                    var undiscoveredClass = !cell.IsDiscovered ? "cell-undiscovered" : "cell-discovered";

                    <button class="mine-cell @undiscoveredClass"
                            @onclick="() => OnLeftClick(currentRow, currentColumn)"
                            @oncontextmenu="() => OnRightClick(currentRow, currentColumn)"
                            @oncontextmenu:preventDefault="true"
                            @onpointerdown="() => { }"
                            @onpointerdown:preventDefault="true"
                            disabled="@(IsGameOver || IsWin)">

                        @if (cell.HasFlag)
                        {
                            <span class="cell-flag">
                                <img src="img/flag.png" alt="img-flag" draggable="false"/>
                            </span>
                        }
                        else if (cell.IsDiscovered)
                        {
                            if (cell is BombCell)
                            {
                                <span class="cell-bomb">
                                    <img src="img/bomb.png" alt="img-bomb" draggable="false"/>
                                </span>
                            }
                            else if (cell is NumberCell numberCell)
                            {
                                <span class="cell-txt cell-number-@numberCell.Number">@numberCell.Number</span>
                            }
                        }

                    </button>
                }
            }

        </div>

        <div class="footer-game">

            <button class="footer-game__restart-button" @onclick="RestartGame">RESTART</button>

        </div>

    </div>

</div>